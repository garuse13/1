let user = null; let balance = 0; let stocks = Array(10).fill().map((_, i) => ({ name: `주식 ${i + 1}`, price: Math.floor(Math.random() * 1000) + 100, owned: 0 })); let isGameRunning = false; let lastGameTime = 0; const COOLDOWN = 3000; // 3초 쿨타임 // 회원가입 및 로그인 function signup() { const username = document.getElementById('signup-username').value; const password = document.getElementById('signup-password').value; if (username && password) { localStorage.setItem(username, JSON.stringify({ password, balance: 10000 })); alert('회원가입 성공!'); showLogin(); } else { alert('아이디와 비밀번호를 입력하세요.'); } } function login() { const username = document.getElementById('login-username').value; const password = document.getElementById('login-password').value; const data = JSON.parse(localStorage.getItem(username)); if (data && data.password === password) { user = username; balance = data.balance; showPage('menu-page'); updateBalance(); } else { alert('아이디 또는 비밀번호가 잘못되었습니다.'); } } function logout() { user = null; showPage('auth-page'); } // 페이지 전환 function showPage(pageId) { document.querySelectorAll('.page').forEach(page => { page.classList.remove('active'); }); const page = document.getElementById(pageId); page.classList.add('active'); if (pageId === 'menu-page') updateBalance(); if (pageId === 'stock-page') updateStockList(); } // 잔고 업데이트 function updateBalance() { document.getElementById('balance').textContent = balance; document.getElementById('stock-balance').textContent = balance; if (user) { localStorage.setItem(user, JSON.stringify({ ...JSON.parse(localStorage.getItem(user)), balance })); } } // 쿨타임 체크 function checkCooldown() { const now = Date.now(); if (now - lastGameTime < COOLDOWN) { alert(`쿨타임 중입니다. ${((COOLDOWN - (now - lastGameTime)) / 1000).toFixed(1)}초 남음`); return false; } return true; } // 크래시 게임 let crashMultiplier = 1; let crashInterval; function startCrash() { if (!checkCooldown() || isGameRunning) return; const bet = parseInt(document.getElementById('crash-bet').value); if (!bet || bet <= 0) { alert('유효한 베팅 금액을 입력하세요.'); return; } isGameRunning = true; lastGameTime = Date.now(); balance -= bet; updateBalance(); crashMultiplier = 1; document.getElementById('crash-start').disabled = true; document.getElementById('crash-stop').disabled = false; const canvas = document.getElementById('crash-canvas'); const ctx = canvas.getContext('2d'); let x = 0; crashInterval = setInterval(() => { crashMultiplier += 0.05; document.getElementById('crash-multiplier').textContent = crashMultiplier.toFixed(2) + 'x'; // 그래프 애니메이션 ctx.clearRect(0, 0, canvas.width, canvas.height); ctx.beginPath(); ctx.moveTo(0, canvas.height); ctx.lineTo(x, canvas.height - (crashMultiplier * 50)); ctx.strokeStyle = '#00ffcc'; ctx.lineWidth = 2; ctx.stroke(); x += 5; // 랜덤 크래시 if (Math.random() < 0.02 || crashMultiplier > 10) { clearInterval(crashInterval); document.getElementById('crash-status').textContent = `크래시! ${crashMultiplier.toFixed(2)}x에서 멈춤`; isGameRunning = false; document.getElementById('crash-start').disabled = false; document.getElementById('crash-stop').disabled = true; } }, 100); } function stopCrash() { if (!isGameRunning) return; clearInterval(crashInterval); const bet = parseInt(document.getElementById('crash-bet').value); balance += bet * crashMultiplier; document.getElementById('crash-status').textContent = `멈춤! ${crashMultiplier.toFixed(2)}x로 ${bet * crashMultiplier}원 획득`; updateBalance(); isGameRunning = false; document.getElementById('crash-start').disabled = false; document.getElementById('crash-stop').disabled = true; } // 주사위 게임 function playDice() { if (!checkCooldown() || isGameRunning) return; const bet = parseInt(document.getElementById('dice-bet').value); const guess = parseInt(document.getElementById('dice-guess').value); if (!bet || bet <= 0 || !guess || guess < 2 || guess > 12) { alert('유효한 베팅 금액과 예측(2-12)을 입력하세요.'); return; } isGameRunning = true; lastGameTime = Date.now(); balance -= bet; updateBalance(); const dice1 = Math.floor(Math.random() * 6) + 1; const dice2 = Math.floor(Math.random() * 6) + 1; const sum = dice1 + dice2; const resultDiv = document.getElementById('dice-result'); resultDiv.innerHTML = `주사위: ${dice1} + ${dice2} = ${sum}<br>`; // 주사위 애니메이션 resultDiv.style.transition = 'transform 0.5s'; resultDiv.style.transform = 'rotate(360deg)'; setTimeout(() => { resultDiv.style.transform = 'rotate(0deg)'; if (sum === guess) { balance += bet * 7; resultDiv.innerHTML += `승리! ${bet * 7}원 획득`; } else { resultDiv.innerHTML += '패배!'; } updateBalance(); isGameRunning = false; }, 500); } // 룰렛 게임 function playRoulette() { if (!checkCooldown() || isGameRunning) return; const bet = parseInt(document.getElementById('roulette-bet').value); const number = parseInt(document.getElementById('roulette-number').value); if (!bet || bet <= 0 || isNaN(number) || number < 0 || number > 36) { alert('유효한 베팅 금액과 숫자(0-36)를 입력하세요.'); return; } isGameRunning = true; lastGameTime = Date.now(); balance -= bet; updateBalance(); const resultDiv = document.getElementById('roulette-result'); resultDiv.textContent = '룰렛이 돌아갑니다...'; resultDiv.style.transition = 'transform 2s ease-out'; resultDiv.style.transform = 'rotate(720deg)'; setTimeout(() => { resultDiv.style.transform = 'rotate(0deg)'; const result = Math.floor(Math.random() * 37); resultDiv.textContent = `결과: ${result}`; if (result === number) { balance += bet * 35; resultDiv.textContent += ` 승리! ${bet * 35}원 획득`; } else { resultDiv.textContent += ' 패배!'; } updateBalance(); isGameRunning = false; }, 2000); } // 구슬벽 게임 function playPlinko() { if (!checkCooldown() || isGameRunning) return; const bet = parseInt(document.getElementById('plinko-bet').value); if (!bet || bet <= 0) { alert('유효한 베팅 금액을 입력하세요.'); return; } isGameRunning = true; lastGameTime = Date.now(); balance -= bet; updateBalance(); const canvas = document.getElementById('plinko-canvas'); const ctx = canvas.getContext('2d'); const multipliers = [0.2, 0.5, 1, 2, 5, 10]; let ballX = canvas.width / 2; let ballY = 0; const ballRadius = 10; // 구슬벽 핀 const pins = []; for (let row = 1; row <= 10; row++) { for (let col = 0; col < row; col++) { pins.push({ x: (canvas.width / (row + 1)) * (col + 1), y: row * 40 }); } } function animatePlinko() { ctx.clearRect(0, 0, canvas.width, canvas.height); // 핀 그리기 pins.forEach(pin => { ctx.beginPath(); ctx.arc(pin.x, pin.y, 5, 0, Math.PI * 2); ctx.fillStyle = '#00ffcc'; ctx.fill(); }); // 구슬 그리기 ctx.beginPath(); ctx.arc(ballX, ballY, ballRadius, 0, Math.PI * 2); ctx.fillStyle = '#ff00ff'; ctx.fill(); // 구슬 이동 ballY += 5; if (Math.random() < 0.5) ballX += Math.random() * 10 - 5; // 핀 충돌 pins.forEach(pin => { if (Math.hypot(pin.x - ballX, pin.y - ballY) < ballRadius + 5) { ballX += Math.random() * 20 - 10; } }); if (ballY < canvas.height - 20) { requestAnimationFrame(animatePlinko); } else { const slot = Math.floor(ballX / (canvas.width / multipliers.length)); const multiplier = multipliers[slot] || 1; balance += bet * multiplier; document.getElementById('plinko-result').textContent = `배수: ${multiplier}x, ${bet * multiplier}원 획득`; updateBalance(); isGameRunning = false; } } animatePlinko(); } // 주식 시장 function updateStockList() { stocks.forEach(stock => { stock.price += Math.random() * 200 - 100; if (stock.price < 100) stock.price = 100; }); const stockList = document.getElementById('stock-list'); stockList.innerHTML = ''; stocks.forEach((stock, i) => { const div = document.createElement('div'); div.innerHTML = `${stock.name}: ${stock.price.toFixed(0)}원, 보유: ${stock.owned} <button onclick="buyStock(${i})">구매</button> <button onclick="sellStock(${i})">판매</button>`; stockList.appendChild(div); }); } function buyStock(index) { stocks[index].owned++; updateStockList(); } function sellStock(index) { if (stocks[index].owned > 0) { balance += stocks[index].price; stocks[index].owned--; updateBalance(); updateStockList(); } else { alert('보유한 주식이 없습니다.'); } } // 회원가입/로그인 화면 전환 function showSignup() { document.getElementById('login-form').style.display = 'none'; document.getElementById('signup-form').style.display = 'block'; } function showLogin() { document.getElementById('login-form').style.display = 'block'; document.getElementById('signup-form').style.display = 'none'; }